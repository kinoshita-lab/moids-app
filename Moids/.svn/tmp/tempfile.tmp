#include "WProgram.h"
#include "Moids.h"


// scenario length table[sec]
//extern const int Moids::m_scenarioLengthTable[] =
const unsigned int Moids::m_scenarioLengthTable[] =
{
    10, // InitialSequence
    10, // Transition
    10, // Interactive
};

Moids::Moids()
{
    init();
}

void Moids::init()
{
    m_scenarioFunction = &Moids::initialSequenceScenario;
    m_timerCounter = 0;
    m_secCounter = 0;
    m_scenario = InitialSequence;
    m_state = ReadingAnalog;
    m_threshold = 0;
}

void Moids::loop()
{
    switch (m_state)
    {
    case ReadingAnalog:
	readAnalogInput();
	break;
    default:
	break;
    }
}

void Moids::readAnalogInput()
{
    // read Input 2 times
    for (int i = 0; i < MIC_INPUT_ARRAY_LENGTH; i++)
    {
	m_micInput[i] = analogRead(m_outputLEDPin);
    }

    // check threshold
    if ( abs(m_micInput[0] - m_micInput[1]) >= m_threshold)
    {
	m_state = SoundInput;
    }
}


void Moids::setInputMicPin(const int pin)
{
    m_inputMicPin = pin;
	
}
    
void Moids::setOutputLEDPin(const int pin)
{
    m_outputLEDPin = pin;
    pinMode(pin, OUTPUT);
}
	
void Moids::setOutputRelayPin(const int pin)
{
    m_outputRelayPin = pin;
    pinMode(pin, OUTPUT);
}

// tick from MsTimer2, assuming tick cycle is 125 usec 
void Moids::tick()
{
    m_timerCounter++;
	
    if (m_timerCounter > COUNTER_PER_1SEC)
    {
	m_secCounter++;
	m_timerCounter = 0;

	transitToNextScenario();
    }

    // open this comment needing todo sth while timer tick
    //(this->*m_scenarioFunction)();
}

void Moids::transitToNextScenario()
{
<<<<<<< .mine
    if (m_secCounter <  m_scenarioLengthTable[m_scenario])
=======
    if (m_secCounter <  10)
>>>>>>> .r2
    {
	return;
    }

    m_secCounter = 0;
	
    switch (m_scenario)
    {    
    case InitialSequence:
	m_scenario = Transition;
	m_scenarioFunction = &Moids::transitionScenario;
	break;
    case Transition:
	m_scenario = Interactive;
	m_scenarioFunction = &Moids::interactiveSequenceScenario;
	break;
    case Interactive:
	init();
	break;
    default:
	m_scenario = InitialSequence;
	m_scenarioFunction = &Moids::initialSequenceScenario;
	break;
    }
}

void Moids::initialSequenceScenario()
{
    // nop (so far)
}

void Moids::transitionScenario()
{
    // nop (so far)
}

void Moids::interactiveSequenceScenario()
{
    // nop (so far)
}

