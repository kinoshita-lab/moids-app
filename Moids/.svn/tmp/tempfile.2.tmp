#pragma onc


/** Moid Class Definition
 */	       
class Moids
{
public:
    // ctor
    Moids();

    // 初期化
    void init();
    void setInputMicPin(const int pin);
    void setOutputLEDPin(const int pin);
    void setOutputRelayPin(const int pin);

    // タイマーのコールバック
    void tick();

    // Loop からマイクの音量を読みに行く
    void loop();
    
private:

    // enums for scenario transitions
    enum SequenceScenario
    {
	InitialSequence = 0,
	Transition,
	Interactive,
	NumberOfScenarios,
    };

    // enum for interactive functions
    enum MoidsState
    {
	ReadAnalog = 0,
	SoundInput,
	GenerateSound,
	NumberOfStates,
    };

    void readAnalogInput();

    // scenario functions
    void changeScenario(const int scenario);
    void transitToNextScenario();
    void initialSequenceScenario();
    void transitionScenario();
    void interactiveSequenceScenario();
    // function pointer for scenario
    void (Moids::*m_scenarioFunction)();

    // state functions
    void changeState(const int state);
    void tickReadAnalogState();
    void tickSoundInputState();
    void tickGenerateSoundState();
    // function pointer for state
    void (Moids::*m_stateFunction)();

    // changes for each scenario transition
    void changeOnScenarioStart();
    void changeOnScenarioStart_InitialSequence();
    void changeOnScenarioStart_Transition();
    void changeOnScenarioStart_Interactive();

    // changes for each soundDetection
    void changeOnEachSoundDetection();
    void changeOnEachSoundDetection_InitialSequence();
    void changeOnEachSoundDetectionO_Transition();
    void changeOnEachSoundDetection_Interactive();
    
    SequenceScenario m_scenario;
    MoidsState m_state;
    
    unsigned long m_timerCounter;
    unsigned long m_secCounter;

    // pins
    int m_inputMicPin;
    int m_outputLEDPin;
    int m_outputRelayPin;

    // mic input workaround
    static const int MIC_INPUT_ARRAY_LENGTH = 2;
    int m_micInput[2];
    int m_threshold;

    // sound input workaround
    int m_soundInputWaitFireCounterLimit; // wait for firing sound
    int m_soundInputWaitFireCounter;
    
    int m_soundInputOnTimeCounterLimit; // relay on time
    int m_soundInputOnTimeCounter;

    int m_fireProbability; // fire prob. in mil% on initial sequence
    
    static const unsigned long COUNTER_PER_1SEC = 8000;
    static const int LED_BRIGHTNESS_WAITING = 1;
<<<<<<< .mine
    static const int LED_BRIGHTNESS_INPUT_DETECTED = 1;
    static const int LED_BRIGHTNESS_SOUND_GENERATING = 16;
=======
    static const int LED_BRIGHTNESS_INPUT_DETECTED = 4;
    static const int LED_BRIGHTNESS_SOUND_GENERATING = 32;
>>>>>>> .r9
    static const unsigned int m_scenarioLengthTable[NumberOfScenarios];
};
